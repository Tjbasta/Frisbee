7/1

let scoresDiff = 4;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, BinalScore;
let j = 0;

while (scoresDiff > 5.5 || BinalDiff > 1.5) {
  const players = playerTable.data.filter(player => player.Present);

  console.log('picking players from table!');
  console.log('sorting players by Runner attribute!');

  function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }

  players.sort((a, b) => b.Runner - a.Runner); // Sorting by Runner attribute

  teams = [[], []];
  throwersScore = [0, 0];
  runnersScore = [0, 0];
  scores = [0, 0];
  BinalScore = [0, 0];

  // Assign top 4 players to teams based on Runner score
  for (let i = 0; i < 4; i++) {
    const currentPlayer = players[i];
    const teamIndex = i % 2; // Alternately assign to teams

    // Assign player to the chosen team and update scores
    teams[teamIndex].push(currentPlayer);
    scores[teamIndex] += currentPlayer.Score;
    throwersScore[teamIndex] += currentPlayer.Thrower;
    runnersScore[teamIndex] += currentPlayer.Runner;
    BinalScore[teamIndex] += currentPlayer.Binal;
  }

  // Remove top 4 players from players array
  players.splice(0, 4);
  
  // Shuffle remaining players
  shuffle(players);

  // Sorting remaining players by Thrower attribute
  players.sort((a, b) => b.Thrower - a.Thrower);

  // Continue with the rest of the code as before
  for (let i = 0; i < players.length; i++) {
    const currentPlayer = players[i];

    const throwersDiff = Math.abs(throwersScore[0] - throwersScore[1]);
    const runnersDiff = Math.abs(runnersScore[0] - runnersScore[1]);

    let teamIndex;

    // If throwers and runners are balanced, assign based on total score
    if (throwersDiff === 0 && runnersDiff === 0) {
      teamIndex = scores[0] <= scores[1] ? 0 : 1;
    } 
    // If throwers are less balanced than runners, assign based on thrower score
    else if (throwersDiff > runnersDiff) {
      teamIndex = throwersScore[0] <= throwersScore[1] ? 0 : 1;
    } 
    // If runners are less balanced or equal to throwers, assign based on runner score
    else {
      teamIndex = runnersScore[0] <= runnersScore[1] ? 0 : 1;
    }

    // Assign player to the chosen team and update scores
    teams[teamIndex].push(currentPlayer);
    scores[teamIndex] += currentPlayer.Score;
    throwersScore[teamIndex] += currentPlayer.Thrower;
    runnersScore[teamIndex] += currentPlayer.Runner;
    BinalScore[teamIndex] += currentPlayer.Binal;

    scoresDiff = Math.abs(scores[0] - scores[1]);
    BinalDiff = Math.abs(BinalScore[0] - BinalScore[1]);
  }

  j++; // Increment the loop counter
}

return {
  team1: teams[0],
  team2: teams[1],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  loopCount: j // Include the loop count in the returned object
};


``








6/28

let scoresDiff = 4;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, BinalScore;
let j = 0;

while (scoresDiff > 2 || BinalDiff > 1.5) {
  const players = playerTable.data.filter(player => player.Present);

  console.log('picking players from table!');
  console.log('sorting players!');

  function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }
  shuffle(players);

  players.sort((a, b) => b.Runner - a.Runner);

  teams = [[], []];
  throwersScore = [0, 0];
  runnersScore = [0, 0];
  scores = [0, 0];
  BinalScore = [0, 0];

  for (let i = 0; i < players.length; i++) {
    const currentPlayer = players[i];

    const throwersDiff = Math.abs(throwersScore[0] - throwersScore[1]);
    const runnersDiff = Math.abs(runnersScore[0] - runnersScore[1]);

    if (throwersDiff === 0 && runnersDiff === 0) {
      if (scores[0] <= scores[1]) {
        teams[0].push(currentPlayer);
        scores[0] += currentPlayer.Score;
        throwersScore[0] += currentPlayer.Thrower;
        runnersScore[0] += currentPlayer.Runner;
        BinalScore[0] += currentPlayer.Binal;
      } else {
        teams[1].push(currentPlayer);
        scores[1] += currentPlayer.Score;
        throwersScore[1] += currentPlayer.Thrower;
        runnersScore[1] += currentPlayer.Runner;
        BinalScore[1] += currentPlayer.Binal;
      }
    } else {
      if (throwersDiff > runnersDiff) {
        if (throwersScore[0] <= throwersScore[1]) {
          teams[0].push(currentPlayer);
          scores[0] += currentPlayer.Score;
          throwersScore[0] += currentPlayer.Thrower;
          runnersScore[0] += currentPlayer.Runner;
          BinalScore[0] += currentPlayer.Binal;
        } else {
          teams[1].push(currentPlayer);
          scores[1] += currentPlayer.Score;
          throwersScore[1] += currentPlayer.Thrower;
          runnersScore[1] += currentPlayer.Runner;
          BinalScore[1] += currentPlayer.Binal;
        }
      } else {
        if (runnersScore[0] <= runnersScore[1]) {
          teams[0].push(currentPlayer);
          scores[0] += currentPlayer.Score;
          throwersScore[0] += currentPlayer.Thrower;
          runnersScore[0] += currentPlayer.Runner;
          BinalScore[0] += currentPlayer.Binal;
        } else {
          teams[1].push(currentPlayer);
          scores[1] += currentPlayer.Score;
          throwersScore[1] += currentPlayer.Thrower;
          runnersScore[1] += currentPlayer.Runner;
          BinalScore[1] += currentPlayer.Binal;
        }
      }
    }


    scoresDiff = Math.abs(Math.min(...scores) - Math.max(...scores));
    BinalDiff = Math.abs(Math.min(...BinalScore) - Math.max(...BinalScore));
  }

  j++; // Increment the loop counter
}

// Shuffle player order
shuffle(teams[0]);
shuffle(teams[1]);

return {
  team1: teams[0],
  team2: teams[1],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  loopCount: j // Include the loop count in the returned object
};
``














const players = playerTable.data.filter(player => player.Present);

console.log('picking players from table!');
console.log('sorting players!');

// shuffle the list of players
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}
shuffle(players);

// sort players by overall score in descending order
players.sort((a, b) => b.Runner - a.Runner);

// initialize list for teams
const teams = [[], []];

// initialize variables to track number of players who can throw and run and aggregate scores
let throwersScore = [0, 0];
let runnersScore = [0, 0];
let scores = [0, 0];

// add players to teams, prioritizing score and balance
for (let i = 0; i < players.length; i++) { 
  const currentPlayer = players[i];

  // check which team has less throwers and runners
  const throwersDiff = Math.abs(throwersScore[0] - throwersScore[1]);
  const runnersDiff = Math.abs(runnersScore[0] - runnersScore[1]);

  // if both teams have equal throwers and runners, add to team with lower overall score
  if (throwersDiff === 0 && runnersDiff === 0) {
    if (scores[0] <= scores[1]) {
      teams[0].push(currentPlayer);
      scores[0] += currentPlayer.Score;
      throwersScore[0] += currentPlayer.Thrower;
      runnersScore[0] += currentPlayer.Runner;
    }
    else {
      teams[1].push(currentPlayer);
      scores[1] += currentPlayer.Score;
      throwersScore[1] += currentPlayer.Thrower;
      runnersScore[1] += currentPlayer.Runner;
    }
  }
  else {
    // add to team with lower count of specific skill
    if (throwersDiff > runnersDiff) {
      if (throwersScore[0] <= throwersScore[1]) {
        teams[0].push(currentPlayer);
        scores[0] += currentPlayer.Score;
        throwersScore[0] += currentPlayer.Thrower;
        runnersScore[0] += currentPlayer.Runner;
      }
      else {
        teams[1].push(currentPlayer);
        scores[1] += currentPlayer.Score;
        throwersScore[1] += currentPlayer.Thrower;
        runnersScore[1] += currentPlayer.Runner;
      }
    }
    else {
      if (runnersScore[0] <= runnersScore[1]) {
        teams[0].push(currentPlayer);
        scores[0] += currentPlayer.Score;
        throwersScore[0] += currentPlayer.Thrower;
        runnersScore[0] += currentPlayer.Runner;
      }
      else {
        teams[1].push(currentPlayer);
        scores[1] += currentPlayer.Score;
        throwersScore[1] += currentPlayer.Thrower;
        runnersScore[1] += currentPlayer.Runner;
      }
    }
  }
}



return { team1: teams[0], team2: teams[1], scores: scores,  throwersScore:  throwersScore, runnersScore:  runnersScore };

7/18
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

let teamSizesDiff = 2;
let scoresDiff = 71;
let runnersDiff = 0;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, teamSizes;
let players;
let j = 0; // Counter variable to track the number of iterations
let BinalScore; // Declare BinalScore array
let maxIterations = 5000; // Maximum iterations to prevent an infinite loop
let runnersDiffThreshold = 0.25;
let scoresDiffThreshold = 0.25;
let BinalDiffThreshold = 1;
let R = 0; // Variable to track the number of times thresholds are increased

while ((teamSizesDiff > 1 || scoresDiff > scoresDiffThreshold || runnersDiff > runnersDiffThreshold || BinalDiff > BinalDiffThreshold) && j < maxIterations) {
  j++; // Increment the counter variable

  players = playerTable.data.filter(player => player.Present);

  console.log('picking players from table!');
  console.log('sorting players!');

  // First, sort the players by their runner score.
  players.sort((a, b) => b.Runner - a.Runner);

  teams = [[], []];
  throwersScore = [0, 0];
  runnersScore = [0, 0];
  scores = [0, 0];
  teamSizes = [0, 0];
  BinalScore = [0, 0]; // Initialize BinalScore array

  const assignedRunners = new Set(); // Track assigned runners to ensure no more than 1 per team

  // Assign each of the top 2 players to a different team with randomness.
  for (let i = 0; i < 2; i++) {
    const currentPlayer = players[i];
    let randomTeamIndex = Math.floor(Math.random() * 2); // Generate a random team index
    while (teamSizes[randomTeamIndex] >= 1 || assignedRunners.has(randomTeamIndex)) {
      // If the team already has a player or the team has been assigned a runner already, find another random team index
      randomTeamIndex = Math.floor(Math.random() * 2);
    }
    teams[randomTeamIndex].push(currentPlayer);
    scores[randomTeamIndex] += currentPlayer.Score;
    throwersScore[randomTeamIndex] += currentPlayer.Thrower;
    runnersScore[randomTeamIndex] += currentPlayer.Runner;
    teamSizes[randomTeamIndex]++;
    BinalScore[randomTeamIndex] += currentPlayer.Binal; // Add currentPlayer's Binal to the corresponding team's BinalScore
    assignedRunners.add(randomTeamIndex); // Add the assigned runner to the set
  }

  // Now sort the remaining players by their thrower score.
  const remainingPlayers = players.slice(2).sort((a, b) => b.Thrower - a.Thrower);

  // Shuffle the remaining players
  shuffleArray(remainingPlayers);

  for (let i = 0; i < remainingPlayers.length; i++) {
    const currentPlayer = remainingPlayers[i];
    const lowestScoreTeamIndex = scores.indexOf(Math.min(...scores));
    teams[lowestScoreTeamIndex].push(currentPlayer);
    scores[lowestScoreTeamIndex] += currentPlayer.Score;
    throwersScore[lowestScoreTeamIndex] += currentPlayer.Thrower;
    runnersScore[lowestScoreTeamIndex] += currentPlayer.Runner;
    teamSizes[lowestScoreTeamIndex]++;
    BinalScore[lowestScoreTeamIndex] += currentPlayer.Binal; // Add currentPlayer's Binal to the corresponding team's BinalScore
  }

  scoresDiff = Math.abs(Math.min(...scores) - Math.max(...scores));
  runnersDiff = Math.abs(Math.min(...runnersScore) - Math.max(...runnersScore));
  teamSizesDiff = Math.abs(Math.min(...teamSizes) - Math.max(...teamSizes));
  BinalDiff = Math.abs(Math.min(...BinalScore) - Math.max(...BinalScore)); // Calculate the BinalDiff based on the teams' BinalScores

  if (j >= maxIterations) {
    // Increase the thresholds by 0.25
    runnersDiffThreshold += 0.25;
    scoresDiffThreshold += 0.25;
    BinalDiffThreshold += 0.25;
    // Reset the iteration counter
    j = 0;
    // Increment the R counter
    R++;
  }
}

const allPlayers = players.map((player, index) => [player.Name, player.Score, teams.findIndex(team => team.includes(player)) + 1]);

const playerNames = allPlayers.map(player => player[0]);
const playerScores = allPlayers.map(player => player[1]);
const playerTeamNumbers = allPlayers.map(player => player[2]);
const ID = Array.from({ length: allPlayers.length }, (_, index) => index + 1);

throwersScore = throwersScore.map(score => Math.round(score * 10) / 10);
runnersScore = runnersScore.map(score => Math.round(score * 10) / 10);
scores = scores.map(score => Math.round(score * 10) / 10);

teams[0].sort((a, b) => b.Score - a.Score);
teams[1].sort((a, b) => b.Score - a.Score);

//shuffleArray(teams[0]);
//shuffleArray(teams[1]);

return {
  team1: teams[0],
  team2: teams[1],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  runnersDiff: runnersDiff,
  teamSizesDiff: teamSizesDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  playerNames: playerNames,
  playerScores: playerScores,
  playerTeamNumbers: playerTeamNumbers,
  ID: ID,
  j: j,
  R: R
};

``






7/3

let players = playerTable.data.filter(player => player.Present);
let scoresDiff = 4;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, BinalScore;
let j = 0;
let z = 0;
let x = 0;

const maxIterations = 2000;

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

while ((scoresDiff > 1 || BinalDiff > 1.5) && j < maxIterations) {
  let playersCopy = [...players];  // Create a copy of players to manipulate
  
  playersCopy.sort((a, b) => b.Runner - a.Runner);
  
  // Randomize top 4 runners
  const topRunners = playersCopy.splice(0, 4); // Remove the top 4 runners from the pool
  shuffle(topRunners);

  let randomizedPlayers = [...topRunners, ...playersCopy]; // Combine top runners and rest of the players

  teams = [[], []];
  throwersScore = [0, 0];
  runnersScore = [0, 0];
  scores = [0, 0];
  BinalScore = [0, 0];
  let teamSizes = [0, 0];

  // Distribute the top 4 players
  for (let i = 0; i < 4; i++) {
    const teamIndex = i % 2; 
    const currentPlayer = randomizedPlayers[i];

    teams[teamIndex].push(currentPlayer);
    scores[teamIndex] += currentPlayer.Score;
    throwersScore[teamIndex] += currentPlayer.Thrower;
    runnersScore[teamIndex] += currentPlayer.Runner;
    BinalScore[teamIndex] += currentPlayer.Binal;
    teamSizes[teamIndex]++;
  }

  randomizedPlayers.splice(0, 4); // Remove the top 4 players from the pool
  
  shuffle(randomizedPlayers);  // Shuffle remaining players

  // Distribute the remaining players
  for (let i = 0; i < randomizedPlayers.length; i++) {
    const currentPlayer = randomizedPlayers[i];
    let teamIndex;

    if (teamSizes[0] === teamSizes[1]) {
      teamIndex = scores[0] <= scores[1] ? 0 : 1;
    } else {
      teamIndex = teamSizes[0] < teamSizes[1] ? 0 : 1;
    }

    teams[teamIndex].push(currentPlayer);
    scores[teamIndex] += currentPlayer.Score;
    throwersScore[teamIndex] += currentPlayer.Thrower;
    runnersScore[teamIndex] += currentPlayer.Runner;
    BinalScore[teamIndex] += currentPlayer.Binal;
    teamSizes[teamIndex]++;

    scoresDiff = Math.abs(scores[0] - scores[1]);
    BinalDiff = Math.abs(BinalScore[0] - BinalScore[1]);
  }

  j++;
}

if (j >= maxIterations) {
  console.log("Maximum iterations reached. Running second algorithm.");

  while ((scoresDiff > 1 || BinalDiff > 1.5 || Math.abs(teamSizes[0] - teamSizes[1]) > 2) && z < maxIterations) {
    teams = [[], []];
    throwersScore = [0, 0];
    runnersScore = [0, 0];
    scores = [0, 0];
    BinalScore = [0, 0];
    teamSizes = [0, 0];

    shuffle(players);

    for (let i = 0; i < players.length; i++) {
      const currentPlayer = players[i];

      let teamIndex;

      if (teamSizes[0] === teamSizes[1]) {
        teamIndex = scores[0] <= scores[1] ? 0 : 1;
      } else {
        teamIndex = teamSizes[0] < teamSizes[1] ? 0 : 1;
      }

      teams[teamIndex].push(currentPlayer);
      scores[teamIndex] += currentPlayer.Score;
      throwersScore[teamIndex] += currentPlayer.Thrower;
      runnersScore[teamIndex] += currentPlayer.Runner;
      BinalScore[teamIndex] += currentPlayer.Binal;
      teamSizes[teamIndex]++;

      scoresDiff = Math.abs(scores[0] - scores[1]);
      BinalDiff = Math.abs(BinalScore[0] - BinalScore[1]);
    }

    z++;
  }

  if (z >= maxIterations) {
    console.log("Maximum iterations reached. Running third algorithm.");

    while ((scoresDiff > 2 || BinalDiff > 1.5 || Math.abs(teamSizes[0] - teamSizes[1]) > 2) && x < maxIterations) {
      teams = [[], []];
      throwersScore = [0, 0];
      runnersScore = [0, 0];
      scores = [0, 0];
      BinalScore = [0, 0];
      teamSizes = [0, 0];

      shuffle(players);

      for (let i = 0; i < players.length; i++) {
        const currentPlayer = players[i];

        let teamIndex;

        if (teamSizes[0] === teamSizes[1]) {
          teamIndex = scores[0] <= scores[1] ? 0 : 1;
        } else {
          teamIndex = teamSizes[0] < teamSizes[1] ? 0 : 1;
        }

        teams[teamIndex].push(currentPlayer);
        scores[teamIndex] += currentPlayer.Score;
        throwersScore[teamIndex] += currentPlayer.Thrower;
        runnersScore[teamIndex] += currentPlayer.Runner;
        BinalScore[teamIndex] += currentPlayer.Binal;
        teamSizes[teamIndex]++;

        scoresDiff = Math.abs(scores[0] - scores[1]);
        BinalDiff = Math.abs(BinalScore[0] - BinalScore[1]);
      }

      x++;
    }

    if (x >= maxIterations) {
      console.log("Maximum iterations reached. Running original algorithm.");
    }
  }
}

console.log(`First team players: ${teams[0].length}`);
console.log(`Second team players: ${teams[1].length}`);
console.log(`Score diff: ${Math.abs(scores[0] - scores[1])}`);
console.log(`Binal diff: ${Math.abs(BinalScore[0] - BinalScore[1])}`);

teams[0].sort((a, b) => b.Score - a.Score);
teams[1].sort((a, b) => b.Score - a.Score);

//shuffle(teams[0]);
//shuffle(teams[1]);

throwersScore = throwersScore.map(score => Math.round(score * 10) / 10);
runnersScore = runnersScore.map(score => Math.round(score * 10) / 10);
scores = scores.map(score => Math.round(score * 10) / 10);

return {
  team1: teams[0],
  team2: teams[1],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  scoresDiff: scoresDiff,
  loopCount1: j,
  loopCount2: z
};

``













7/1 with bottom 2 combined 

let scoresDiff = 4;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, BinalScore;
let j = 0;
let z = 0;

const maxIterations = 2000;

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

while ((scoresDiff > 1.25 || BinalDiff > 1.5) && j < maxIterations) {
  const players = playerTable.data.filter(player => player.Present);
  
  console.log('picking players from table!');
  console.log('sorting players by Runner attribute!');
  
  players.sort((a, b) => b.Runner - a.Runner); // Sorting by Runner attribute

  teams = [[], []];
  throwersScore = [0, 0];
  runnersScore = [0, 0];
  scores = [0, 0];
  BinalScore = [0, 0];

  // Assign top 4 players to teams based on Runner score
  for (let i = 0; i < 4; i++) {
    const currentPlayer = players[i];
    const teamIndex = i % 2; // Alternately assign to teams

    // Assign player to the chosen team and update scores
    teams[teamIndex].push(currentPlayer);
    scores[teamIndex] += currentPlayer.Score;
    throwersScore[teamIndex] += currentPlayer.Thrower;
    runnersScore[teamIndex] += currentPlayer.Runner;
    BinalScore[teamIndex] += currentPlayer.Binal;
  }

  // Remove top 4 players from players array
  players.splice(0, 4);
  
  // Shuffle remaining players
  shuffle(players);

  // Sorting remaining players by Thrower attribute
  players.sort((a, b) => b.Thrower - a.Thrower);

  // Continue with the rest of the code as before
  for (let i = 0; i < players.length; i++) {
    const currentPlayer = players[i];

    const throwersDiff = Math.abs(throwersScore[0] - throwersScore[1]);
    const runnersDiff = Math.abs(runnersScore[0] - runnersScore[1]);

    let teamIndex;

    // If throwers and runners are balanced, assign based on total score
    if (throwersDiff === 0 && runnersDiff === 0) {
      teamIndex = scores[0] <= scores[1] ? 0 : 1;
    } 
    // If throwers are less balanced than runners, assign based on thrower score
    else if (throwersDiff > runnersDiff) {
      teamIndex = throwersScore[0] <= throwersScore[1] ? 0 : 1;
    } 
    // If runners are less balanced or equal to throwers, assign based on runner score
    else {
      teamIndex = runnersScore[0] <= runnersScore[1] ? 0 : 1;
    }

    // Assign player to the chosen team and update scores
    teams[teamIndex].push(currentPlayer);
    scores[teamIndex] += currentPlayer.Score;
    throwersScore[teamIndex] += currentPlayer.Thrower;
    runnersScore[teamIndex] += currentPlayer.Runner;
    BinalScore[teamIndex] += currentPlayer.Binal;

    scoresDiff = Math.abs(scores[0] - scores[1]);
    BinalDiff = Math.abs(BinalScore[0] - BinalScore[1]);
  }

  j++; // Increment the loop counter
}

if (j >= maxIterations) {
  console.log("Maximum iterations reached. Running original algorithm.");

  z = 0;

  while ((scoresDiff > 1 || BinalDiff > 1.5) && z < maxIterations) {
    const players = playerTable.data.filter(player => player.Present);
  
    console.log('picking players from table!');
    console.log('sorting players by Runner attribute!');
  
   // players.sort((a, b) => b.Thrower - a.Thrower); // Sorting by Runner attribute
    for (let i = players.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [players[i], players[j]] = [players[j], players[i]];
    }

    teams = [[], []];
    throwersScore = [0, 0];
    runnersScore = [0, 0];
    scores = [0, 0];
    BinalScore = [0, 0];
  
    // Assign top 4 players to teams based on Runner score
    for (let i = 0; i < 4; i++) {
      const currentPlayer = players[i];
      const teamIndex = i % 2; // Alternately assign to teams
  
      // Assign player to the chosen team and update scores
      teams[teamIndex].push(currentPlayer);
      scores[teamIndex] += currentPlayer.Score;
      throwersScore[teamIndex] += currentPlayer.Thrower;
      runnersScore[teamIndex] += currentPlayer.Runner;
      BinalScore[teamIndex] += currentPlayer.Binal;
    }
  
    // Remove top 4 players from players array
    players.splice(0, 4);
    
    // Shuffle remaining players
    shuffle(players);
  
    // Sorting remaining players by Thrower attribute
    players.sort((a, b) => b.Thrower - a.Thrower);
  
    // Continue with the rest of the code as before
    for (let i = 0; i < players.length; i++) {
      const currentPlayer = players[i];
  
      const throwersDiff = Math.abs(throwersScore[0] - throwersScore[1]);
      const runnersDiff = Math.abs(runnersScore[0] - runnersScore[1]);
  
      let teamIndex;
  
      // If throwers and runners are balanced, assign based on total score
      if (throwersDiff === 0 && runnersDiff === 0) {
        teamIndex = scores[0] <= scores[1] ? 0 : 1;
      } 
      // If throwers are less balanced than runners, assign based on thrower score
      else if (throwersDiff > runnersDiff) {
        teamIndex = throwersScore[0] <= throwersScore[1] ? 0 : 1;
      } 
      // If runners are less balanced or equal to throwers, assign based on runner score
      else {
        teamIndex = runnersScore[0] <= runnersScore[1] ? 0 : 1;
      }
  
      // Assign player to the chosen team and update scores
      teams[teamIndex].push(currentPlayer);
      scores[teamIndex] += currentPlayer.Score;
      throwersScore[teamIndex] += currentPlayer.Thrower;
      runnersScore[teamIndex] += currentPlayer.Runner;
      BinalScore[teamIndex] += currentPlayer.Binal;
  
      scoresDiff = Math.abs(scores[0] - scores[1]);
      BinalDiff = Math.abs(BinalScore[0] - BinalScore[1]);
    }

    z++; // Increment the loop counter
  }

  if (z >= maxIterations) {
    console.log("Maximum iterations reached in both loops.");
  }
}


shuffle(teams[0]);
shuffle(teams[1]);
//teams[0].sort((a, b) => b.Score - a.Score);
//teams[1].sort((a, b) => b.Score - a.Score);

throwersScore = throwersScore.map(score => Math.round(score * 10) / 10);
runnersScore = runnersScore.map(score => Math.round(score * 10) / 10);
scores = scores.map(score => Math.round(score * 10) / 10);

return {
  team1: teams[0],
  team2: teams[1],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  loopCount1: j,
  loopCount2: z// Include the loop count in the returned object
};


``



















7/1

let scoresDiff = 4;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, BinalScore;
let j = 0;

while (scoresDiff > 1.5 || BinalDiff > 1.5) {
  const players = playerTable.data.filter(player => player.Present);

  console.log('picking players from table!');
  console.log('sorting players by Runner attribute!');

  function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }

  players.sort((a, b) => b.Runner - a.Runner); // Sorting by Runner attribute

  teams = [[], []];
  throwersScore = [0, 0];
  runnersScore = [0, 0];
  scores = [0, 0];
  BinalScore = [0, 0];

  // Assign top 4 players to teams based on Runner score
  for (let i = 0; i < 4; i++) {
    const currentPlayer = players[i];
    const teamIndex = i % 2; // Alternately assign to teams

    // Assign player to the chosen team and update scores
    teams[teamIndex].push(currentPlayer);
    scores[teamIndex] += currentPlayer.Score;
    throwersScore[teamIndex] += currentPlayer.Thrower;
    runnersScore[teamIndex] += currentPlayer.Runner;
    BinalScore[teamIndex] += currentPlayer.Binal;
  }

  // Remove top 4 players from players array
  players.splice(0, 4);
  
  // Shuffle remaining players
  shuffle(players);

  // Sorting remaining players by Thrower attribute
  players.sort((a, b) => b.Thrower - a.Thrower);

  // Continue with the rest of the code as before
  for (let i = 0; i < players.length; i++) {
    const currentPlayer = players[i];

    const throwersDiff = Math.abs(throwersScore[0] - throwersScore[1]);
    const runnersDiff = Math.abs(runnersScore[0] - runnersScore[1]);

    let teamIndex;

    // If throwers and runners are balanced, assign based on total score
    if (throwersDiff === 0 && runnersDiff === 0) {
      teamIndex = scores[0] <= scores[1] ? 0 : 1;
    } 
    // If throwers are less balanced than runners, assign based on thrower score
    else if (throwersDiff > runnersDiff) {
      teamIndex = throwersScore[0] <= throwersScore[1] ? 0 : 1;
    } 
    // If runners are less balanced or equal to throwers, assign based on runner score
    else {
      teamIndex = runnersScore[0] <= runnersScore[1] ? 0 : 1;
    }

    // Assign player to the chosen team and update scores
    teams[teamIndex].push(currentPlayer);
    scores[teamIndex] += currentPlayer.Score;
    throwersScore[teamIndex] += currentPlayer.Thrower;
    runnersScore[teamIndex] += currentPlayer.Runner;
    BinalScore[teamIndex] += currentPlayer.Binal;

    scoresDiff = Math.abs(scores[0] - scores[1]);
    BinalDiff = Math.abs(BinalScore[0] - BinalScore[1]);
  }

  j++; // Increment the loop counter
}

return {
  team1: teams[0],
  team2: teams[1],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  loopCount: j // Include the loop count in the returned object
};


``








6/28

let scoresDiff = 4;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, BinalScore;
let j = 0;

while (scoresDiff > 2 || BinalDiff > 1.5) {
  const players = playerTable.data.filter(player => player.Present);

  console.log('picking players from table!');
  console.log('sorting players!');

  function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }
  shuffle(players);

  players.sort((a, b) => b.Runner - a.Runner);

  teams = [[], []];
  throwersScore = [0, 0];
  runnersScore = [0, 0];
  scores = [0, 0];
  BinalScore = [0, 0];

  for (let i = 0; i < players.length; i++) {
    const currentPlayer = players[i];

    const throwersDiff = Math.abs(throwersScore[0] - throwersScore[1]);
    const runnersDiff = Math.abs(runnersScore[0] - runnersScore[1]);

    if (throwersDiff === 0 && runnersDiff === 0) {
      if (scores[0] <= scores[1]) {
        teams[0].push(currentPlayer);
        scores[0] += currentPlayer.Score;
        throwersScore[0] += currentPlayer.Thrower;
        runnersScore[0] += currentPlayer.Runner;
        BinalScore[0] += currentPlayer.Binal;
      } else {
        teams[1].push(currentPlayer);
        scores[1] += currentPlayer.Score;
        throwersScore[1] += currentPlayer.Thrower;
        runnersScore[1] += currentPlayer.Runner;
        BinalScore[1] += currentPlayer.Binal;
      }
    } else {
      if (throwersDiff > runnersDiff) {
        if (throwersScore[0] <= throwersScore[1]) {
          teams[0].push(currentPlayer);
          scores[0] += currentPlayer.Score;
          throwersScore[0] += currentPlayer.Thrower;
          runnersScore[0] += currentPlayer.Runner;
          BinalScore[0] += currentPlayer.Binal;
        } else {
          teams[1].push(currentPlayer);
          scores[1] += currentPlayer.Score;
          throwersScore[1] += currentPlayer.Thrower;
          runnersScore[1] += currentPlayer.Runner;
          BinalScore[1] += currentPlayer.Binal;
        }
      } else {
        if (runnersScore[0] <= runnersScore[1]) {
          teams[0].push(currentPlayer);
          scores[0] += currentPlayer.Score;
          throwersScore[0] += currentPlayer.Thrower;
          runnersScore[0] += currentPlayer.Runner;
          BinalScore[0] += currentPlayer.Binal;
        } else {
          teams[1].push(currentPlayer);
          scores[1] += currentPlayer.Score;
          throwersScore[1] += currentPlayer.Thrower;
          runnersScore[1] += currentPlayer.Runner;
          BinalScore[1] += currentPlayer.Binal;
        }
      }
    }


    scoresDiff = Math.abs(Math.min(...scores) - Math.max(...scores));
    BinalDiff = Math.abs(Math.min(...BinalScore) - Math.max(...BinalScore));
  }

  j++; // Increment the loop counter
}

// Shuffle player order
shuffle(teams[0]);
shuffle(teams[1]);

return {
  team1: teams[0],
  team2: teams[1],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  loopCount: j // Include the loop count in the returned object
};
``














const players = playerTable.data.filter(player => player.Present);

console.log('picking players from table!');
console.log('sorting players!');

// shuffle the list of players
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}
shuffle(players);

// sort players by overall score in descending order
players.sort((a, b) => b.Runner - a.Runner);

// initialize list for teams
const teams = [[], []];

// initialize variables to track number of players who can throw and run and aggregate scores
let throwersScore = [0, 0];
let runnersScore = [0, 0];
let scores = [0, 0];

// add players to teams, prioritizing score and balance
for (let i = 0; i < players.length; i++) { 
  const currentPlayer = players[i];

  // check which team has less throwers and runners
  const throwersDiff = Math.abs(throwersScore[0] - throwersScore[1]);
  const runnersDiff = Math.abs(runnersScore[0] - runnersScore[1]);

  // if both teams have equal throwers and runners, add to team with lower overall score
  if (throwersDiff === 0 && runnersDiff === 0) {
    if (scores[0] <= scores[1]) {
      teams[0].push(currentPlayer);
      scores[0] += currentPlayer.Score;
      throwersScore[0] += currentPlayer.Thrower;
      runnersScore[0] += currentPlayer.Runner;
    }
    else {
      teams[1].push(currentPlayer);
      scores[1] += currentPlayer.Score;
      throwersScore[1] += currentPlayer.Thrower;
      runnersScore[1] += currentPlayer.Runner;
    }
  }
  else {
    // add to team with lower count of specific skill
    if (throwersDiff > runnersDiff) {
      if (throwersScore[0] <= throwersScore[1]) {
        teams[0].push(currentPlayer);
        scores[0] += currentPlayer.Score;
        throwersScore[0] += currentPlayer.Thrower;
        runnersScore[0] += currentPlayer.Runner;
      }
      else {
        teams[1].push(currentPlayer);
        scores[1] += currentPlayer.Score;
        throwersScore[1] += currentPlayer.Thrower;
        runnersScore[1] += currentPlayer.Runner;
      }
    }
    else {
      if (runnersScore[0] <= runnersScore[1]) {
        teams[0].push(currentPlayer);
        scores[0] += currentPlayer.Score;
        throwersScore[0] += currentPlayer.Thrower;
        runnersScore[0] += currentPlayer.Runner;
      }
      else {
        teams[1].push(currentPlayer);
        scores[1] += currentPlayer.Score;
        throwersScore[1] += currentPlayer.Thrower;
        runnersScore[1] += currentPlayer.Runner;
      }
    }
  }
}



return { team1: teams[0], team2: teams[1], scores: scores,  throwersScore:  throwersScore, runnersScore:  runnersScore };

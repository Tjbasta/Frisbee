10/17

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

let teamSizesDiff = 2;
let scoresDiff = 71;
let runnersDiff = 0;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, teamSizes;
let players;
let j = 0;
let BinalScore;
let maxIterations = 5000;
let runnersDiffThreshold = 0.5;
let scoresDiffThreshold = 0.5;
let BinalDiffThreshold = 2;
let R = 0;

while (
  (teamSizesDiff > 1 ||
    scoresDiff > scoresDiffThreshold ||
    runnersDiff > runnersDiffThreshold ||
    BinalDiff > BinalDiffThreshold) &&
  j < maxIterations
) {
  j++;

  players = playerTable.data.filter(player => player.Present);

  console.log('picking players from table!');
  console.log('sorting players!');

  players.sort((a, b) => b.Runner - a.Runner);

  teams = [[], [], [], []];
  throwersScore = [0, 0, 0, 0];
  runnersScore = [0, 0, 0, 0];
  scores = [0, 0, 0, 0];
  teamSizes = [0, 0, 0, 0];
  BinalScore = [0, 0, 0, 0];

  // Assign each of the top 4 runners to different teams.
  for (let i = 0; i < 4; i++) {
    const currentPlayer = players[i];
    const teamIndex = i % 4;
    teams[teamIndex].push(currentPlayer);
    scores[teamIndex] += currentPlayer.Score;
    throwersScore[teamIndex] += currentPlayer.Thrower;
    runnersScore[teamIndex] += currentPlayer.Runner;
    teamSizes[teamIndex]++;
    BinalScore[teamIndex] += currentPlayer.Binal;
  }

  // Shuffle the next 4 runners and assign them to teams randomly.
  const nextRunners = players.slice(4, 8);
  shuffleArray(nextRunners);

  for (let i = 0; i < nextRunners.length; i++) {
    const currentPlayer = nextRunners[i];
    const teamIndex = i % 4;
    teams[teamIndex].push(currentPlayer);
    scores[teamIndex] += currentPlayer.Score;
    throwersScore[teamIndex] += currentPlayer.Thrower;
    runnersScore[teamIndex] += currentPlayer.Runner;
    teamSizes[teamIndex]++;
    BinalScore[teamIndex] += currentPlayer.Binal;
  }

  const remainingPlayers = players.slice(8).sort((a, b) => b.Thrower - a.Thrower);

  shuffleArray(remainingPlayers);

  // ... (Rest of your code remains unchanged)
  for (let i = 0; i < remainingPlayers.length; i++) {
    const currentPlayer = remainingPlayers[i];
    const lowestScoreTeamIndex = scores.indexOf(Math.min(...scores));
    teams[lowestScoreTeamIndex].push(currentPlayer);
    scores[lowestScoreTeamIndex] += currentPlayer.Score;
    throwersScore[lowestScoreTeamIndex] += currentPlayer.Thrower;
    runnersScore[lowestScoreTeamIndex] += currentPlayer.Runner;
    teamSizes[lowestScoreTeamIndex]++;
    BinalScore[lowestScoreTeamIndex] += currentPlayer.Binal;
  }

  scoresDiff = Math.abs(Math.min(...scores) - Math.max(...scores));
  runnersDiff = Math.abs(Math.min(...runnersScore) - Math.max(...runnersScore));
  teamSizesDiff = Math.abs(Math.min(...teamSizes) - Math.max(...teamSizes));
  BinalDiff = Math.abs(Math.min(...BinalScore) - Math.max(...BinalScore));

  if (j >= maxIterations) {
    runnersDiffThreshold += 0.25;
    scoresDiffThreshold += 0.25;
    BinalDiffThreshold += 0.25;
    j = 0;
    R++;
  }
}

const allPlayers = players.map((player, index) => [player.Name, player.Score, teams.findIndex(team => team.includes(player)) + 1]);

const playerNames = allPlayers.map(player => player[0]);
const playerScores = allPlayers.map(player => player[1]);
const playerTeamNumbers = allPlayers.map(player => player[2]);
const ID = Array.from({ length: allPlayers.length }, (_, index) => index + 1);

throwersScore = throwersScore.map(score => Math.round(score * 10) / 10);
runnersScore = runnersScore.map(score => Math.round(score * 10) / 10);
scores = scores.map(score => Math.round(score * 10) / 10);

teams[0].sort((a, b) => b.Score - a.Score);
teams[1].sort((a, b) => b.Score - a.Score);
teams[2].sort((a, b) => b.Score - a.Score);
teams[3].sort((a, b) => b.Score - a.Score);

//shuffleArray(teams[0]);
//shuffleArray(teams[1]);
//shuffleArray(teams[2]);
//shuffleArray(teams[3]);

return {
  team1: teams[0],
  team2: teams[1],
  team3: teams[2],
  team4: teams[3],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  runnersDiff: runnersDiff,
  teamSizesDiff: teamSizesDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  playerNames: playerNames,
  playerScores: playerScores,
  playerTeamNumbers: playerTeamNumbers,
  ID: ID,
  j: j,
  R: R
};

``





















10/12
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

let teamSizesDiff = 2;
let scoresDiff = 71;
let runnersDiff = 0;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, teamSizes;
let players;
let j = 0; // Counter variable to track the number of iterations
let BinalScore; // Declare BinalScore array
let maxIterations = 5000; // Maximum iterations to prevent an infinite loop
let runnersDiffThreshold = .5;
let scoresDiffThreshold = .5;
let BinalDiffThreshold = 2;
let R = 0; // Variable to track the number of times thresholds are increased

while ((teamSizesDiff > 1 || scoresDiff > scoresDiffThreshold || runnersDiff > runnersDiffThreshold || BinalDiff > BinalDiffThreshold) && j < maxIterations) {
  j++; // Increment the counter variable

  players = playerTable.data.filter(player => player.Present);

  console.log('picking players from table!');
  console.log('sorting players!');

  // First, sort the players by their runner score.
  players.sort((a, b) => b.Runner - a.Runner);

  teams = [[], [], [], []];
  throwersScore = [0, 0, 0, 0];
  runnersScore = [0, 0, 0, 0];
  scores = [0, 0, 0, 0];
  teamSizes = [0, 0, 0, 0];
  BinalScore = [0, 0, 0, 0]; // Initialize BinalScore array

  const assignedRunners = new Set(); // Track assigned runners to ensure no more than 2 per team

  // Assign each of the top 8 players to a different team with randomness.
// Assign each of the top 8 runners to different teams.
for (let i = 0; i < 8; i++) {
    const currentPlayer = players[i];
    const teamIndex = i % 4; // Distributes players across the 4 teams
    teams[teamIndex].push(currentPlayer);
    scores[teamIndex] += currentPlayer.Score;
    throwersScore[teamIndex] += currentPlayer.Thrower;
    runnersScore[teamIndex] += currentPlayer.Runner;
    teamSizes[teamIndex]++;
    BinalScore[teamIndex] += currentPlayer.Binal; 
}


  // Now sort the remaining players by their thrower score.
  const remainingPlayers = players.slice(8).sort((a, b) => b.Thrower - a.Thrower);

  // Shuffle the remaining players
  shuffleArray(remainingPlayers);

  for (let i = 0; i < remainingPlayers.length; i++) {
    const currentPlayer = remainingPlayers[i];
    const lowestScoreTeamIndex = scores.indexOf(Math.min(...scores));
    teams[lowestScoreTeamIndex].push(currentPlayer);
    scores[lowestScoreTeamIndex] += currentPlayer.Score;
    throwersScore[lowestScoreTeamIndex] += currentPlayer.Thrower;
    runnersScore[lowestScoreTeamIndex] += currentPlayer.Runner;
    teamSizes[lowestScoreTeamIndex]++;
    BinalScore[lowestScoreTeamIndex] += currentPlayer.Binal; // Add currentPlayer's Binal to the corresponding team's BinalScore
  }

  scoresDiff = Math.abs(Math.min(...scores) - Math.max(...scores));
  runnersDiff = Math.abs(Math.min(...runnersScore) - Math.max(...runnersScore));
  teamSizesDiff = Math.abs(Math.min(...teamSizes) - Math.max(...teamSizes));
  BinalDiff = Math.abs(Math.min(...BinalScore) - Math.max(...BinalScore)); // Calculate the BinalDiff based on the teams' BinalScores

  if (j >= maxIterations) {
    // Increase the thresholds by 0.25
    runnersDiffThreshold += 0.25;
    scoresDiffThreshold += 0.25;
    BinalDiffThreshold += 0.25;
    // Reset the iteration counter
    j = 0;
    // Increment the R counter
    R++;
  }
}

const allPlayers = players.map((player, index) => [player.Name, player.Score, teams.findIndex(team => team.includes(player)) + 1]);

const playerNames = allPlayers.map(player => player[0]);
const playerScores = allPlayers.map(player => player[1]);
const playerTeamNumbers = allPlayers.map(player => player[2]);
const ID = Array.from({ length: allPlayers.length }, (_, index) => index + 1);

throwersScore = throwersScore.map(score => Math.round(score * 10) / 10);
runnersScore = runnersScore.map(score => Math.round(score * 10) / 10);
scores = scores.map(score => Math.round(score * 10) / 10);

teams[0].sort((a, b) => b.Score - a.Score);
teams[1].sort((a, b) => b.Score - a.Score);
teams[2].sort((a, b) => b.Score - a.Score);
teams[3].sort((a, b) => b.Score - a.Score);

//shuffleArray(teams[0]);
//shuffleArray(teams[1]);
//shuffleArray(teams[2]);
//shuffleArray(teams[3]);

return {
  team1: teams[0],
  team2: teams[1],
  team3: teams[2],
  team4: teams[3],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  runnersDiff: runnersDiff,
  teamSizesDiff: teamSizesDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  playerNames: playerNames,
  playerScores: playerScores,
  playerTeamNumbers: playerTeamNumbers,
  ID: ID,
  j: j,
  R: R
};

``

``































7/18

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

let teamSizesDiff = 2;
let scoresDiff = 71;
let runnersDiff = 0;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, teamSizes;
let players;
let j = 0; // Counter variable to track the number of iterations
let BinalScore; // Declare BinalScore array
let maxIterations = 5000; // Maximum iterations to prevent an infinite loop
let runnersDiffThreshold = .5;
let scoresDiffThreshold = .5;
let BinalDiffThreshold = 1.5;
let R = 0; // Variable to track the number of times thresholds are increased

while ((teamSizesDiff > 1 || scoresDiff > scoresDiffThreshold || runnersDiff > runnersDiffThreshold || BinalDiff > BinalDiffThreshold) && j < maxIterations) {
  j++; // Increment the counter variable

  players = playerTable.data.filter(player => player.Present);

  console.log('picking players from table!');
  console.log('sorting players!');

  // First, sort the players by their runner score.
  players.sort((a, b) => b.Runner - a.Runner);

  teams = [[], [], [], []];
  throwersScore = [0, 0, 0, 0];
  runnersScore = [0, 0, 0, 0];
  scores = [0, 0, 0, 0];
  teamSizes = [0, 0, 0, 0];
  BinalScore = [0, 0, 0, 0]; // Initialize BinalScore array

  const assignedRunners = new Set(); // Track assigned runners to ensure no more than 2 per team

  // Assign each of the top 8 players to a different team with randomness.
  for (let i = 0; i < 8; i++) {
    const currentPlayer = players[i];
    let randomTeamIndex = Math.floor(Math.random() * 4); // Generate a random team index
    while (teamSizes[randomTeamIndex] >= 2 || assignedRunners.has(randomTeamIndex)) {
      // If the team already has 2 players or the team has been assigned a player already, find another random team index
      randomTeamIndex = Math.floor(Math.random() * 4);
    }
    teams[randomTeamIndex].push(currentPlayer);
    scores[randomTeamIndex] += currentPlayer.Score;
    throwersScore[randomTeamIndex] += currentPlayer.Thrower;
    runnersScore[randomTeamIndex] += currentPlayer.Runner;
    teamSizes[randomTeamIndex]++;
    BinalScore[randomTeamIndex] += currentPlayer.Binal; // Add currentPlayer's Binal to the corresponding team's BinalScore
    assignedRunners.add(currentPlayer); // Add the assigned runner to the set
  }

  // Now sort the remaining players by their thrower score.
  const remainingPlayers = players.slice(8).sort((a, b) => b.Thrower - a.Thrower);

  // Shuffle the remaining players
  shuffleArray(remainingPlayers);

  for (let i = 0; i < remainingPlayers.length; i++) {
    const currentPlayer = remainingPlayers[i];
    const lowestScoreTeamIndex = scores.indexOf(Math.min(...scores));
    teams[lowestScoreTeamIndex].push(currentPlayer);
    scores[lowestScoreTeamIndex] += currentPlayer.Score;
    throwersScore[lowestScoreTeamIndex] += currentPlayer.Thrower;
    runnersScore[lowestScoreTeamIndex] += currentPlayer.Runner;
    teamSizes[lowestScoreTeamIndex]++;
    BinalScore[lowestScoreTeamIndex] += currentPlayer.Binal; // Add currentPlayer's Binal to the corresponding team's BinalScore
  }

  scoresDiff = Math.abs(Math.min(...scores) - Math.max(...scores));
  runnersDiff = Math.abs(Math.min(...runnersScore) - Math.max(...runnersScore));
  teamSizesDiff = Math.abs(Math.min(...teamSizes) - Math.max(...teamSizes));
  BinalDiff = Math.abs(Math.min(...BinalScore) - Math.max(...BinalScore)); // Calculate the BinalDiff based on the teams' BinalScores

  if (j >= maxIterations) {
    // Increase the thresholds by 0.25
    runnersDiffThreshold += 0.25;
    scoresDiffThreshold += 0.25;
    BinalDiffThreshold += 0.25;
    // Reset the iteration counter
    j = 0;
    // Increment the R counter
    R++;
  }
}

const allPlayers = players.map((player, index) => [player.Name, player.Score, teams.findIndex(team => team.includes(player)) + 1]);

const playerNames = allPlayers.map(player => player[0]);
const playerScores = allPlayers.map(player => player[1]);
const playerTeamNumbers = allPlayers.map(player => player[2]);
const ID = Array.from({ length: allPlayers.length }, (_, index) => index + 1);

throwersScore = throwersScore.map(score => Math.round(score * 10) / 10);
runnersScore = runnersScore.map(score => Math.round(score * 10) / 10);
scores = scores.map(score => Math.round(score * 10) / 10);

teams[0].sort((a, b) => b.Score - a.Score);
teams[1].sort((a, b) => b.Score - a.Score);
teams[2].sort((a, b) => b.Score - a.Score);
teams[3].sort((a, b) => b.Score - a.Score);

//shuffleArray(teams[0]);
//shuffleArray(teams[1]);
//shuffleArray(teams[2]);
//shuffleArray(teams[3]);

return {
  team1: teams[0],
  team2: teams[1],
  team3: teams[2],
  team4: teams[3],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  runnersDiff: runnersDiff,
  teamSizesDiff: teamSizesDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  playerNames: playerNames,
  playerScores: playerScores,
  playerTeamNumbers: playerTeamNumbers,
  ID: ID,
  j: j,
  R: R
};

``







7/3

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

let teamSizesDiff = 2;
let scoresDiff = 71;
let runnersDiff = 0;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, teamSizes;
let players;
let j = 0; // Counter variable to track the number of iterations
let BinalScore; // Declare BinalScore array
let maxIterations = 5000; // Maximum iterations to prevent an infinite loop
let runnersDiffThreshold = 1;
let scoresDiffThreshold = 1;
let BinalDiffThreshold = 1;
let R = 0; // Variable to track the number of times thresholds are increased

while ((teamSizesDiff > 1 || scoresDiff > scoresDiffThreshold || runnersDiff > runnersDiffThreshold || BinalDiff > BinalDiffThreshold) && j < maxIterations) {
  j++; // Increment the counter variable

  players = playerTable.data.filter(player => player.Present);

  console.log('picking players from table!');
  console.log('sorting players!');

  // First, sort the players by their runner score.
  players.sort((a, b) => b.Runner - a.Runner);

  teams = [[], [], [], []];
  throwersScore = [0, 0, 0, 0];
  runnersScore = [0, 0, 0, 0];
  scores = [0, 0, 0, 0];
  teamSizes = [0, 0, 0, 0];
  BinalScore = [0, 0, 0, 0]; // Initialize BinalScore array

  // Assign each of the top 4 players to a different team.
  for (let i = 0; i < 4; i++) {
    const currentPlayer = players[i];
    teams[i].push(currentPlayer);
    scores[i] += currentPlayer.Score;
    throwersScore[i] += currentPlayer.Thrower;
    runnersScore[i] += currentPlayer.Runner;
    teamSizes[i]++;
    BinalScore[i] += currentPlayer.Binal; // Add currentPlayer's Binal to the corresponding team's BinalScore
  }

  // Now sort the remaining players by their thrower score.
  const remainingPlayers = players.slice(4).sort((a, b) => b.Thrower - a.Thrower);

  // Shuffle the remaining players
  shuffleArray(remainingPlayers);

  for (let i = 0; i < remainingPlayers.length; i++) {
    const currentPlayer = remainingPlayers[i];
    const lowestScoreTeamIndex = scores.indexOf(Math.min(...scores));
    teams[lowestScoreTeamIndex].push(currentPlayer);
    scores[lowestScoreTeamIndex] += currentPlayer.Score;
    throwersScore[lowestScoreTeamIndex] += currentPlayer.Thrower;
    runnersScore[lowestScoreTeamIndex] += currentPlayer.Runner;
    teamSizes[lowestScoreTeamIndex]++;
    BinalScore[lowestScoreTeamIndex] += currentPlayer.Binal; // Add currentPlayer's Binal to the corresponding team's BinalScore
  }

  scoresDiff = Math.abs(Math.min(...scores) - Math.max(...scores));
  runnersDiff = Math.abs(Math.min(...runnersScore) - Math.max(...runnersScore));
  teamSizesDiff = Math.abs(Math.min(...teamSizes) - Math.max(...teamSizes));
  BinalDiff = Math.abs(Math.min(...BinalScore) - Math.max(...BinalScore)); // Calculate the BinalDiff based on the teams' BinalScores

  if (j >= maxIterations) {
    // Increase the thresholds by 0.25
    runnersDiffThreshold += 0.25;
    scoresDiffThreshold += 0.25;
    BinalDiffThreshold += 0.25;
    // Reset the iteration counter
    j = 0;
    // Increment the R counter
    R++;
  }
}

const allPlayers = players.map((player, index) => [player.Name, player.Score, teams.findIndex(team => team.includes(player)) + 1]);

const playerNames = allPlayers.map(player => player[0]);
const playerScores = allPlayers.map(player => player[1]);
const playerTeamNumbers = allPlayers.map(player => player[2]);
const ID = Array.from({ length: allPlayers.length }, (_, index) => index + 1);

throwersScore = throwersScore.map(score => Math.round(score * 10) / 10);
runnersScore = runnersScore.map(score => Math.round(score * 10) / 10);
scores = scores.map(score => Math.round(score * 10) / 10);

//teams[0].sort((a, b) => b.Score - a.Score);
//teams[1].sort((a, b) => b.Score - a.Score);
//teams[2].sort((a, b) => b.Score - a.Score);
//teams[3].sort((a, b) => b.Score - a.Score);

shuffleArray(teams[0]);
shuffleArray(teams[1]);
shuffleArray(teams[2]);
shuffleArray(teams[3]);

return {
  team1: teams[0],
  team2: teams[1],
  team3: teams[2],
  team4: teams[3],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  runnersDiff: runnersDiff,
  teamSizesDiff: teamSizesDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  playerNames: playerNames,
  playerScores: playerScores,
  playerTeamNumbers: playerTeamNumbers,
  ID: ID,
  j: j,
  R: R
};


``










7/1
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

let teamSizesDiff = 2;
let scoresDiff = 71;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, teamSizes;
let players;
let j = 0; // Counter variable to track the number of iterations
let BinalScore; // Declare BinalScore array
let maxIterations = 4000; // Maximum iterations to prevent infinite loop

while ((teamSizesDiff > 1 || scoresDiff > 1.5 || BinalDiff > 1.5) && j < maxIterations) {
  j++; // Increment the counter variable

  players = playerTable.data.filter(player => player.Present);
  
  console.log('picking players from table!');
  console.log('sorting players!');
  
  // First, sort the players by their runner score.
  players.sort((a, b) => b.Runner - a.Runner);

  teams = [[], [], [], []];
  throwersScore = [0, 0, 0, 0];
  runnersScore = [0, 0, 0, 0];
  scores = [0, 0, 0, 0];
  teamSizes = [0, 0, 0, 0];
  BinalScore = [0, 0, 0, 0]; // Initialize BinalScore array
  
  // Assign each of the top 4 players to a different team.
  for (let i = 0; i < 4; i++) {
    const currentPlayer = players[i];
    teams[i].push(currentPlayer);
    scores[i] += currentPlayer.Score;
    throwersScore[i] += currentPlayer.Thrower;
    runnersScore[i] += currentPlayer.Runner;
    teamSizes[i]++;
    BinalScore[i] += currentPlayer.Binal; // Add currentPlayer's Binal to the corresponding team's BinalScore
  }
  
  // Now sort the remaining players by their thrower score.
  const remainingPlayers = players.slice(4).sort((a, b) => b.Thrower - a.Thrower);
  
  // Shuffle the remaining players
  shuffleArray(remainingPlayers);

  for (let i = 0; i < remainingPlayers.length; i++) {
    const currentPlayer = remainingPlayers[i];
    const lowestScoreTeamIndex = scores.indexOf(Math.min(...scores));
    teams[lowestScoreTeamIndex].push(currentPlayer);
    scores[lowestScoreTeamIndex] += currentPlayer.Score;
    throwersScore[lowestScoreTeamIndex] += currentPlayer.Thrower;
    runnersScore[lowestScoreTeamIndex] += currentPlayer.Runner;
    teamSizes[lowestScoreTeamIndex]++;
    BinalScore[lowestScoreTeamIndex] += currentPlayer.Binal; // Add currentPlayer's Binal to the corresponding team's BinalScore
  }
  
  scoresDiff = Math.abs(Math.min(...scores) - Math.max(...scores));
  runnersDiff = Math.abs(Math.min(...runnersScore) - Math.max(...runnersScore));
  teamSizesDiff = Math.abs(Math.min(...teamSizes) - Math.max(...teamSizes));
  BinalDiff = Math.abs(Math.min(...BinalScore) - Math.max(...BinalScore)); // Calculate the BinalDiff based on the teams' BinalScores
}

const allPlayers = players.map((player, index) => [player.Name, player.Score, teams.findIndex(team => team.includes(player)) + 1]);

const playerNames = allPlayers.map(player => player[0]);
const playerScores = allPlayers.map(player => player[1]);
const playerTeamNumbers = allPlayers.map(player => player[2]);
const ID = Array.from({ length: allPlayers.length }, (_, index) => index + 1);

throwersScore = throwersScore.map(score => Math.round(score * 10) / 10);
runnersScore = runnersScore.map(score => Math.round(score * 10) / 10);
scores = scores.map(score => Math.round(score * 10) / 10);

teams[0].sort((a, b) => b.Score - a.Score);
teams[1].sort((a, b) => b.Score - a.Score);
teams[2].sort((a, b) => b.Score - a.Score);
teams[3].sort((a, b) => b.Score - a.Score);

shuffleArray(teams[0]);
shuffleArray(teams[1]);
shuffleArray(teams[2]);
shuffleArray(teams[3]);

return {
  team1: teams[0],
  team2: teams[1],
  team3: teams[2],
  team4: teams[3],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  runnersDiff: runnersDiff,
  teamSizesDiff: teamSizesDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  playerNames: playerNames,
  playerScores: playerScores,
  playerTeamNumbers: playerTeamNumbers,
  ID: ID,
  j: j
};

``














function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

let teamSizesDiff = 2;
let scoresDiff = 71;
let BinalDiff = 4;
let teams, throwersScore, runnersScore, scores, teamSizes;
let players;
let j = 0; // Counter variable to track the number of iterations
let BinalScore; // Declare BinalScore array
let maxIterations = 4000; // Maximum iterations to prevent infinite loop

while ((teamSizesDiff > 1 || scoresDiff > 1.5 || BinalDiff > 1.5) && j < maxIterations) {
  j++; // Increment the counter variable

  players = playerTable.data.filter(player => player.Present);
  
  console.log('picking players from table!');
  console.log('sorting players!');
  
  // First, sort the players by their runner score.
  players.sort((a, b) => b.Runner - a.Runner);

  teams = [[], [], [], []];
  throwersScore = [0, 0, 0, 0];
  runnersScore = [0, 0, 0, 0];
  scores = [0, 0, 0, 0];
  teamSizes = [0, 0, 0, 0];
  BinalScore = [0, 0, 0, 0]; // Initialize BinalScore array
  
  // Assign each of the top 4 players to a different team.
  for (let i = 0; i < 4; i++) {
    const currentPlayer = players[i];
    teams[i].push(currentPlayer);
    scores[i] += currentPlayer.Score;
    throwersScore[i] += currentPlayer.Thrower;
    runnersScore[i] += currentPlayer.Runner;
    teamSizes[i]++;
    BinalScore[i] += currentPlayer.Binal; // Add currentPlayer's Binal to the corresponding team's BinalScore
  }
  
  // Now sort the remaining players by their thrower score.
  const remainingPlayers = players.slice(4).sort((a, b) => b.Thrower - a.Thrower);
  
  // Shuffle the remaining players
  shuffleArray(remainingPlayers);

  for (let i = 0; i < remainingPlayers.length; i++) {
    const currentPlayer = remainingPlayers[i];
    const lowestScoreTeamIndex = scores.indexOf(Math.min(...scores));
    teams[lowestScoreTeamIndex].push(currentPlayer);
    scores[lowestScoreTeamIndex] += currentPlayer.Score;
    throwersScore[lowestScoreTeamIndex] += currentPlayer.Thrower;
    runnersScore[lowestScoreTeamIndex] += currentPlayer.Runner;
    teamSizes[lowestScoreTeamIndex]++;
    BinalScore[lowestScoreTeamIndex] += currentPlayer.Binal; // Add currentPlayer's Binal to the corresponding team's BinalScore
  }
  
  scoresDiff = Math.abs(Math.min(...scores) - Math.max(...scores));
  runnersDiff = Math.abs(Math.min(...runnersScore) - Math.max(...runnersScore));
  teamSizesDiff = Math.abs(Math.min(...teamSizes) - Math.max(...teamSizes));
  BinalDiff = Math.abs(Math.min(...BinalScore) - Math.max(...BinalScore)); // Calculate the BinalDiff based on the teams' BinalScores
}

const allPlayers = players.map((player, index) => [player.Name, player.Score, teams.findIndex(team => team.includes(player)) + 1]);

const playerNames = allPlayers.map(player => player[0]);
const playerScores = allPlayers.map(player => player[1]);
const playerTeamNumbers = allPlayers.map(player => player[2]);
const ID = Array.from({ length: allPlayers.length }, (_, index) => index + 1);

throwersScore = throwersScore.map(score => Math.round(score * 10) / 10);
runnersScore = runnersScore.map(score => Math.round(score * 10) / 10);
scores = scores.map(score => Math.round(score * 10) / 10);

return {
  team1: teams[0],
  team2: teams[1],
  team3: teams[2],
  team4: teams[3],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  runnersDiff: runnersDiff,
  teamSizesDiff: teamSizesDiff,
  BinalScore: BinalScore,
  BinalDiff: BinalDiff,
  playerNames: playerNames,
  playerScores: playerScores,
  playerTeamNumbers: playerTeamNumbers,
  ID: ID,
  j: j
};

``











let teamSizesDiff = 2;
let scoresDiff = 71;
let teams, throwersScore, runnersScore, scores, teamSizes;
let players, runnersDiff;

while (teamSizesDiff > 1 || scoresDiff > 1.5) {
  players = playerTable.data.filter(player => player.Present);

  console.log('picking players from table!');
  console.log('sorting players!');

  players.sort((a, b) => b.Runner - a.Runner);

  for (let i = players.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [players[i], players[j]] = [players[j], players[i]];
  }

  teams = [[], [], [], []];
  throwersScore = [0, 0, 0, 0];
  runnersScore = [0, 0, 0, 0];
  scores = [0, 0, 0, 0];
  teamSizes = [0, 0, 0, 0];

  for (let i = 0; i < players.length; i++) {
    const currentPlayer = players[i];
    const throwersDiff = Math.min(...throwersScore) - Math.max(...throwersScore);
    const runnersDiff = Math.min(...runnersScore) - Math.max(...runnersScore);

    if (throwersDiff === 0 && runnersDiff === 0) {
      const lowestScoreTeamIndex = scores.indexOf(Math.min(...scores));
      teams[lowestScoreTeamIndex].push(currentPlayer);
      scores[lowestScoreTeamIndex] += currentPlayer.Score;
      throwersScore[lowestScoreTeamIndex] += currentPlayer.Thrower;
      runnersScore[lowestScoreTeamIndex] += currentPlayer.Runner;
      teamSizes[lowestScoreTeamIndex]++;
    } else {
      if (throwersDiff > runnersDiff) {
        const lowestThrowersTeamIndex = throwersScore.indexOf(Math.min(...throwersScore));
        teams[lowestThrowersTeamIndex].push(currentPlayer);
        scores[lowestThrowersTeamIndex] += currentPlayer.Score;
        throwersScore[lowestThrowersTeamIndex] += currentPlayer.Thrower;
        runnersScore[lowestThrowersTeamIndex] += currentPlayer.Runner;
        teamSizes[lowestThrowersTeamIndex]++;
      } else {
        const lowestRunnersTeamIndex = runnersScore.indexOf(Math.min(...runnersScore));
        teams[lowestRunnersTeamIndex].push(currentPlayer);
        scores[lowestRunnersTeamIndex] += currentPlayer.Score;
        throwersScore[lowestRunnersTeamIndex] += currentPlayer.Thrower;
        runnersScore[lowestRunnersTeamIndex] += currentPlayer.Runner;
        teamSizes[lowestRunnersTeamIndex]++;
      }
    }
  }

  scoresDiff = Math.abs(Math.min(...scores) - Math.max(...scores));
  runnersDiff = Math.abs(Math.min(...runnersScore) - Math.max(...runnersScore));
  teamSizesDiff = Math.abs(Math.min(...teamSizes) - Math.max(...teamSizes));

  // If teamSizesDiff is still greater than 1, the loop will restart
}

const allPlayers = players.map((player, index) => [player.Name, player.Score, teams.findIndex(team => team.includes(player)) + 1]);

const playerNames = allPlayers.map(player => player[0]);
const playerScores = allPlayers.map(player => player[1]);
const playerTeamNumbers = allPlayers.map(player => player[2]);
const ID = Array.from({ length: allPlayers.length }, (_, index) => index + 1);

return {
  team1: teams[0],
  team2: teams[1],
  team3: teams[2],
  team4: teams[3],
  scores: scores,
  throwersScore: throwersScore,
  runnersScore: runnersScore,
  scoresDiff: scoresDiff,
  runnersDiff: runnersDiff,
  teamSizesDiff: teamSizesDiff,
  playerNames: playerNames,
  playerScores: playerScores,
  playerTeamNumbers: playerTeamNumbers,
  ID: ID
};

``









old determicistic code

const players = playerTable.data.filter(player => player.Present);

console.log('picking players from table!');
console.log('sorting players!');

// sort players by overall score in descending order
players.sort((a, b) => b.Runner - a.Runner);

// initialize list for teams
const teams = [[], [], [], []];

// initialize variables to track number of players who can throw and run and aggregate scores
let throwersScore = [0, 0, 0, 0];
let runnersScore = [0, 0, 0, 0];
let scores = [0, 0, 0, 0];

// add players to teams, prioritizing score and balance
for (let i = 0; i < players.length; i++) { 
  const currentPlayer = players[i];

  // find the team with the lowest total runnersScore
  let lowestRunnersScore = Infinity;
  let targetTeamIndex = 0;
  for (let j = 0; j < teams.length; j++) {
    if (runnersScore[j] < lowestRunnersScore) {
      lowestRunnersScore = runnersScore[j];
      targetTeamIndex = j;
    }
  }

  // add the player to the team with the lowest total runnersScore
  teams[targetTeamIndex].push(currentPlayer);
  scores[targetTeamIndex] += currentPlayer.Score;
  throwersScore[targetTeamIndex] += currentPlayer.Thrower;
  runnersScore[targetTeamIndex] += currentPlayer.Runner;
}

function shuffleTeam(team) {
  for (let i = team.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [team[i], team[j]] = [team[j], team[i]];
  }
}

shuffleTeam(teams[0]);
shuffleTeam(teams[1]);
shuffleTeam(teams[2]);
shuffleTeam(teams[3]);

return { team1: teams[0], team2: teams[1], team3: teams[2], team4: teams[3], scores, throwersScore, runnersScore };
